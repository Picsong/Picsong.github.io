<?xml version="1.0" encoding="utf-8"?>
<feed xmlns="http://www.w3.org/2005/Atom">
  <title>彭松的博客</title>
  
  
  <link href="/atom.xml" rel="self"/>
  
  <link href="https://picsong.top/"/>
  <updated>2019-04-07T03:31:07.072Z</updated>
  <id>https://picsong.top/</id>
  
  <author>
    <name>彭松</name>
    
  </author>
  
  <generator uri="http://hexo.io/">Hexo</generator>
  
  <entry>
    <title>Hooks</title>
    <link href="https://picsong.top/2019/04/05/hooks/"/>
    <id>https://picsong.top/2019/04/05/hooks/</id>
    <published>2019-04-05T15:10:30.000Z</published>
    <updated>2019-04-07T03:31:07.072Z</updated>
    
    <content type="html"><![CDATA[<p><img src="http://with.muyunyun.cn/1daa3d783a4a7ed7f742882a08a3aa09.jpg-400" alt><br>这里就是摘要了，应该有张图在上面！<br><a id="more"></a></p><h3 id="Hooks-每次渲染带着一切"><a href="#Hooks-每次渲染带着一切" class="headerlink" title="Hooks 每次渲染带着一切"></a>Hooks 每次渲染带着一切</h3><ul><li>在 <code>hooks</code> 中每一次 <code>render</code> 都有自己的 <code>state</code> 和 <code>props</code>, 这和 <code>class</code> 中有点差异，见 <a href="https://overreacted.io/a-complete-guide-to-useeffect/#each-render-has-its-own-everything" target="_blank" rel="noopener">each-render-has-its-own-everything</a></li></ul><blockquote><p><code>class</code> 中可以用闭包模拟 <code>hooks</code> 的表现; <code>hooks</code> 中可以使用 <code>ref</code> 模拟 <code>class</code> 的表现, 或者在第二个参数传入需要鉴别的参数;</p></blockquote><h3 id="诚实地写出-useEffect-的所有依赖"><a href="#诚实地写出-useEffect-的所有依赖" class="headerlink" title="诚实地写出 useEffect 的所有依赖"></a>诚实地写出 useEffect 的所有依赖</h3><p>在以下 <code>demo</code> 中, <code>useEffect</code> 的第二个参数传入 <code>[]</code>, 希望 <code>useEffect</code> 里的函数只执行一次(类似在 <code>componentDidMount</code> 中执行一次), 页面上每隔 1s 递增 1。</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">Demo</span>(<span class="params"></span>) </span>&#123;</span><br><span class="line">  <span class="keyword">const</span> [count, setCount] = useState(<span class="number">0</span>);</span><br><span class="line"></span><br><span class="line">  useEffect(<span class="function"><span class="params">()</span> =&gt;</span> &#123;</span><br><span class="line">    <span class="keyword">const</span> id = setInterval(<span class="function"><span class="params">()</span> =&gt;</span> &#123;</span><br><span class="line">      setCount(count + <span class="number">1</span>);</span><br><span class="line">    &#125;, <span class="number">1000</span>);</span><br><span class="line">    <span class="keyword">return</span> <span class="function"><span class="params">()</span> =&gt;</span> &#123;</span><br><span class="line">      clearInterval(id);</span><br><span class="line">    &#125;;</span><br><span class="line">  &#125;, []);</span><br><span class="line"></span><br><span class="line">  <span class="keyword">return</span> count;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>但达到我们预期的效果了么? <a href="https://codesandbox.io/s/n3o2m1wpj4" target="_blank" rel="noopener">demo</a>, 可以看到界面上只增加到 1 就停止了。原因就是传入的第二个参数 <code>[]</code> 搞的鬼, <code>[]</code> 表示没有外界状态对 <code>effect</code> 产生干扰。流程大致如下:</p><ol><li>第一次调用 <code>useEffect</code> 传入的 <code>count</code> 为 0, 于是 <code>setCount(0 + 1)</code>;</li><li>受 <code>useEffect</code> 第二个参数 <code>[]</code> 的影响，所以相当于还是 <code>setCount(0 + 1)</code>;</li></ol><p>那如何修正上述问题呢? 方法有两个(方法一为主, 方法二为辅):</p><ul><li>方法一: 将 <code>[]</code> 改为 <code>[count]</code></li><li>方法二: 将 <code>setCount(count + 1)</code> 改为 <code>setCount(count =&gt; count + 1)</code>。这种方法的思想是修正状态的值而不依赖外面传进的状态。</li></ul><p>不过遇到 <code>setCount(count =&gt; count + 1)</code> 的情况就可以考虑使用 <code>useReducer</code> 了。</p><h3 id="useReducer"><a href="#useReducer" class="headerlink" title="useReducer"></a>useReducer</h3><p><code>useReducer</code> 将行为(dispatch) 和展现抽离开。</p><p>当更新的一个状态依赖于另一个状态时, 使用 <code>useReducer</code> 能避免调用多次 <code>useEffect</code>。见 <a href="https://overreacted.io/a-complete-guide-to-useeffect/#decoupling-updates-from-actions" target="_blank" rel="noopener">decoupling-updates-from-actions</a></p><h3 id="useEffect-中公用函数的逻辑"><a href="#useEffect-中公用函数的逻辑" class="headerlink" title="useEffect 中公用函数的逻辑"></a>useEffect 中公用函数的逻辑</h3><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">Demo</span>(<span class="params"></span>) </span>&#123;</span><br><span class="line">  <span class="keyword">const</span> [count, setCount] = useState(<span class="number">0</span>);</span><br><span class="line"></span><br><span class="line">  <span class="function"><span class="keyword">function</span> <span class="title">getFetchUrl</span>(<span class="params">query</span>) </span>&#123;</span><br><span class="line">    <span class="keyword">return</span> <span class="string">`http://demo<span class="subst">$&#123;query&#125;</span>`</span></span><br><span class="line">  &#125;</span><br><span class="line"></span><br><span class="line">  useEffect(<span class="function"><span class="params">()</span> =&gt;</span> &#123;</span><br><span class="line">    <span class="keyword">const</span> url = getFetchUrl(<span class="string">'react'</span>)</span><br><span class="line">  &#125;, [getFetchUrl]);</span><br><span class="line"></span><br><span class="line">  useEffect(<span class="function"><span class="params">()</span> =&gt;</span> &#123;</span><br><span class="line">    <span class="keyword">const</span> url = getFetchUrl(<span class="string">'redux'</span>)</span><br><span class="line">  &#125;, [getFetchUrl]);</span><br><span class="line"></span><br><span class="line">  <span class="keyword">return</span> count;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>此时 <code>useEffect</code> 中传入的第二个参数 <code>getFetchUrl</code> 相当于每次都是新的, 所以每次都会请求数据, 那除了 <code>[getFetchUrl]</code> 将改为 <code>[]</code> 这种不推荐的写法外，有两种解决方法:</p><ol><li>提升 <code>getFetchUrl</code> 的作用域</li><li>使用 <code>useCallback</code>(<code>useCallback</code> 的作用类似 <code>useMemo</code>)</li></ol><blockquote><p><code>React.memo</code> 修饰一个函数组件, <code>useMemo</code> 修饰一个函数。它们本质都是运用缓存。</p></blockquote><h3 id="todo"><a href="#todo" class="headerlink" title="todo"></a>todo</h3><ul><li style="list-style: none"><input type="checkbox"> 完善 Each Render Has Its Own Everything 例子</li><li style="list-style: none"><input type="checkbox"> <a href="https://www.robinwieruch.de/react-hooks-fetch-data/" target="_blank" rel="noopener">How to fetch data with React Hooks?</a>: 计划读, 可能涉及 susepense</li></ul><h3 id="相关资源"><a href="#相关资源" class="headerlink" title="相关资源"></a>相关资源</h3><ul><li><a href="https://github.com/rehooks/awesome-react-hooks" target="_blank" rel="noopener">awesome-react-hooks</a></li><li><a href="https://github.com/gragland/usehooks" target="_blank" rel="noopener">usehooks</a></li><li><a href="https://overreacted.io/a-complete-guide-to-useeffect/" target="_blank" rel="noopener">a-complete-guide-to-useeffect</a>: 一定要读 Dan 的这篇文章</li></ul>]]></content>
    
    <summary type="html">
    
      &lt;p&gt;&lt;img src=&quot;http://with.muyunyun.cn/1daa3d783a4a7ed7f742882a08a3aa09.jpg-400&quot; alt&gt;&lt;br&gt;这里就是摘要了，应该有张图在上面！&lt;br&gt;
    
    </summary>
    
      <category term="React" scheme="https://picsong.top/categories/React/"/>
    
    
      <category term="React" scheme="https://picsong.top/tags/React/"/>
    
      <category term="Hooks" scheme="https://picsong.top/tags/Hooks/"/>
    
  </entry>
  
  <entry>
    <title>我是彭松</title>
    <link href="https://picsong.top/2019/04/05/%E6%88%91%E6%98%AF%E5%BD%AD%E6%9D%BE/"/>
    <id>https://picsong.top/2019/04/05/我是彭松/</id>
    <published>2019-04-05T15:10:30.000Z</published>
    <updated>2019-04-06T16:51:30.294Z</updated>
    
    <content type="html"><![CDATA[<p>你好，来了就是朋友，我将把这个blog越做越好</p>]]></content>
    
    <summary type="html">
    
      
      
        &lt;p&gt;你好，来了就是朋友，我将把这个blog越做越好&lt;/p&gt;

      
    
    </summary>
    
      <category term="哈哈" scheme="https://picsong.top/categories/%E5%93%88%E5%93%88/"/>
    
    
      <category term="Boy" scheme="https://picsong.top/tags/Boy/"/>
    
      <category term="IOT" scheme="https://picsong.top/tags/IOT/"/>
    
      <category term="PS" scheme="https://picsong.top/tags/PS/"/>
    
  </entry>
  
  <entry>
    <title>Hello World</title>
    <link href="https://picsong.top/2019/04/02/hello-world/"/>
    <id>https://picsong.top/2019/04/02/hello-world/</id>
    <published>2019-04-02T02:10:30.000Z</published>
    <updated>2019-04-07T12:08:00.832Z</updated>
    
    <content type="html"><![CDATA[<p><img src="http://with.muyunyun.cn/5e451855ccc9017708b57164f9e221c6.jpg-400" alt><br>跟着我们上一篇内容继续走，开始实现我们的“hello，world”，本篇实现了第一个hello,world,和关于jsx以及React虚拟元素知识。<br><a id="more"></a></p><h2 id="那么开始吧！"><a href="#那么开始吧！" class="headerlink" title="那么开始吧！"></a>那么开始吧！</h2><h3 id="最简单的hello-world"><a href="#最简单的hello-world" class="headerlink" title="最简单的hello, world"></a>最简单的hello, world</h3><p>就是在src文件夹下的index.js文件中这样写，其中引入的ReactDOM上的方法render是将react虚拟dom转换并渲染到页面的关键。</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line">import React from &apos;react&apos;;</span><br><span class="line">import ReactDOM from &apos;react-dom&apos;;</span><br><span class="line">ReactDOM.render(</span><br><span class="line"> &lt;h1&gt;Hello, world!&lt;/h1&gt;,</span><br><span class="line"> document.getElementById(&apos;root&apos;)</span><br><span class="line">);</span><br></pre></td></tr></table></figure><p>当然这样是实现了，这标志着你这是进入react一个激动的瞬间。<br>More info: <a href="https://zh-hans.reactjs.org/docs/hello-world.html" target="_blank" rel="noopener">官方实例</a></p><h2 id="我们还需要了解"><a href="#我们还需要了解" class="headerlink" title="我们还需要了解"></a>我们还需要了解</h2><p>现在还没有进入到重点，但是我们需要明白一些react的知识。</p><h3 id="JSX与虚拟dom"><a href="#JSX与虚拟dom" class="headerlink" title="JSX与虚拟dom"></a>JSX与虚拟dom</h3><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">const element = &lt;h1&gt;Hello, world!&lt;/h1&gt;;</span><br></pre></td></tr></table></figure><p>这个有趣的标签语法既不是字符串也不是 HTML。  </p><p>它被称为 JSX，是一个 JavaScript 的语法扩展。我们建议在 React 中配合使用 JSX，JSX 可以很好地描述 UI 应该呈现出它应有交互的本质形式。JSX 可能会使人联想到模版语言，但它具有 JavaScript 的全部功能。</p><p>JSX 是一种语法糖, 经过 <a href="https://babeljs.io/en/repl" target="_blank" rel="noopener">babel</a> 转换结果如下, 可以发现实际上转化成 <code>React.createElement()</code> 的形式:</p><blockquote><p>扩展: <a href="https://github.com/MuYunyun/blog/blob/master/BasicSkill/番外篇/babel执行机制.md" target="_blank" rel="noopener">babel 执行机制</a></p></blockquote><p>因此, 我们得出结论: JSX 语法糖经过 Babel 编译后转换成一种对象, 该对象即所谓的<code>虚拟 DOM</code>, 使用虚拟 DOM 能让页面进行更为高效的渲染。</p><p>Babel 会把 JSX 转译成一个名为 React.createElement() 函数调用。  </p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">const element = (</span><br><span class="line"> &lt;h1 className=&quot;greeting&quot;&gt;</span><br><span class="line">   Hello, world!</span><br><span class="line"> &lt;/h1&gt;</span><br><span class="line">);</span><br></pre></td></tr></table></figure><p>上面的和下面的实例代码完全等效  </p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">const element = React.createElement(</span><br><span class="line">  &apos;h1&apos;,</span><br><span class="line">  &#123;className: &apos;greeting&apos;&#125;,</span><br><span class="line">  &apos;Hello, world!&apos;</span><br><span class="line">);</span><br></pre></td></tr></table></figure><p>所以以下两种方式在页面渲染，最终都是一样的。</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">let h1Ele = React.createElement(&apos;h1&apos;, null, &apos;hello world&apos;);//通过React创建一个h1的虚拟dom节点，其实就是一个h1节点的描述对象</span><br><span class="line"></span><br><span class="line">ReactDOM.render(h1Ele, document.querySelector(&apos;#root&apos;));//使用ReactDOM的render方法将虚拟节点转换并添加到指定的节点之中</span><br><span class="line"></span><br><span class="line">ReactDOM.render(&lt;ul&gt;就写下中文&lt;/ul&gt;, document.querySelector(&apos;#root&apos;));//这个就是jsx帮我们做了剩下的事</span><br></pre></td></tr></table></figure><p>但是你也发现了这样一个一个创建dom不是太慢了吗，当我们需要创建多个同样结构的时候怎么办？</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line">let ulEle = React.createElement(&apos;ul&apos;,//第一个参数</span><br><span class="line"> &#123;//第二个参数,如果通过迭代的方式生成第三个参数的内容时，要添加key属性要唯一</span><br><span class="line">        key: &apos;ul0&apos;,//时react内部的算法会用，有唯一性和稳定性</span><br><span class="line">        style: &#123; background: &apos;lightblue&apos; &#125;//样式写在这里，用&#123;&#125;表达式包裹</span><br><span class="line">    &#125;,</span><br><span class="line">    [&apos;HTML&apos;, &apos;CSS&apos;, &apos;JS&apos;].map(item =&gt; React.createElement(&apos;li&apos;, &#123; key: item, style: &#123; color: &apos;red&apos; &#125; &#125;, item)))</span><br><span class="line">ReactDOM.render(ulEle, document.querySelector(&apos;#root&apos;));</span><br><span class="line">console.log(ulEle);</span><br></pre></td></tr></table></figure><p>但是有了jsx为什么我们不用呢？</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line">const pp = (</span><br><span class="line">    &lt;ul&gt;</span><br><span class="line">        &lt;li&gt;HTML&lt;/li&gt;</span><br><span class="line">        &lt;li style=&#123;&#123; color: &apos;red&apos; &#125;&#125;&gt;CSS&lt;/li&gt;</span><br><span class="line">        &lt;li onClick=&#123;() =&gt; console.log(1)&#125;&gt;JS&lt;/li&gt;</span><br><span class="line">    &lt;/ul&gt;</span><br><span class="line">)</span><br><span class="line">ReactDOM.render(pp, document.querySelector(&apos;#root&apos;));</span><br></pre></td></tr></table></figure><p>我们还可以再改进一下。</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line">const p1 = (</span><br><span class="line">    &lt;ul&gt;</span><br><span class="line">        &#123;</span><br><span class="line">            [&apos;HTML&apos;, &apos;CSS&apos;, &apos;JS&apos;].map(e =&gt; &lt;li key=&#123;e&#125; style=&#123;&#123; color: &apos;#312465&apos; &#125;&#125;&gt;&#123;e&#125;&lt;/li&gt;)//li里面的内容也要用&#123;包起来&#125;，不然内容都是e</span><br><span class="line">        &#125;</span><br><span class="line">    &lt;/ul&gt;</span><br><span class="line">)</span><br><span class="line">ReactDOM.render(p1, document.querySelector(&apos;#root&apos;));</span><br></pre></td></tr></table></figure><p><em>jsx其实本质也是转换成了使用React.creatElement创建的内容，只是我们的脚手架中的工具帮我们监听着jsx语法的代码出现，就会帮我们转换了，应为脚手架中使用了webpake，webpake里面用到了babel（就是专门转换jsx语法的工具）</em></p><h3 id="小结"><a href="#小结" class="headerlink" title="小结"></a>小结</h3><p><code>JSX</code> 经过 babel 编译为 React.createElement() 的形式, 其返回结果就是 <code>Virtual DOM</code>, 最后通过 ReactDOM.render() 将 Virtual DOM 转化为真实的 DOM 展现在界面上。流程图如下:</p><p><img src="http://with.muyunyun.cn/5e451855ccc9017708b57164f9e221c6.jpg-400" alt></p><ul><li>下篇文章我们再见。</li></ul>]]></content>
    
    <summary type="html">
    
      &lt;p&gt;&lt;img src=&quot;http://with.muyunyun.cn/5e451855ccc9017708b57164f9e221c6.jpg-400&quot; alt&gt;&lt;br&gt;跟着我们上一篇内容继续走，开始实现我们的“hello，world”，本篇实现了第一个hello,world,和关于jsx以及React虚拟元素知识。&lt;br&gt;
    
    </summary>
    
      <category term="React" scheme="https://picsong.top/categories/React/"/>
    
    
      <category term="React" scheme="https://picsong.top/tags/React/"/>
    
      <category term="JSX" scheme="https://picsong.top/tags/JSX/"/>
    
  </entry>
  
  <entry>
    <title>React极速入门</title>
    <link href="https://picsong.top/2019/04/01/React-%E5%89%8D%E7%BD%AE%E5%87%86%E5%A4%87/"/>
    <id>https://picsong.top/2019/04/01/React-前置准备/</id>
    <published>2019-04-01T02:10:30.000Z</published>
    <updated>2019-04-07T09:00:00.602Z</updated>
    
    <content type="html"><![CDATA[<p>本系列文章学习掌握可对深入学习React有很大帮助，核心内容参照<a href="https://zh-hans.reactjs.org/docs/hello-world.html" target="_blank" rel="noopener">React官方文档</a>的核心概念一步一步写的。<br><a id="more"></a></p><h3 id="环境准备"><a href="#环境准备" class="headerlink" title="环境准备"></a>环境准备</h3><p>随着科技发展，开发也变得越来越简单，易上手了，我们都知道要开发一个项目（指的是我们开发人员负责的部分）在分析了项目大致需求后，就要进行一步很关键的操作，那就是<code>配置环境</code>,也就是我们的开发环境。</p><blockquote><p>具体可以看: <a href="https://facebook.github.io/create-react-app/" target="_blank" rel="noopener">创建React App</a>  </p></blockquote><p>facebook提供了一个快速创建React应用的框架，<strong>create-react-app</strong> 官网上是这样描述的<code>通过运行一个命令来设置现代Web应用程序。</code>它没有骗人，真的只需要一个命令就下载并安装了。</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">npx create-react-app my-app</span><br></pre></td></tr></table></figure><p>这里单词没错就是<code>npx</code>, my-app就是我们的应用名字。静静的等待它下载完成后。我们这里在下载一个类型npm的工具叫做<code>yarn</code>,下载代码</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">npm i yarn -g</span><br></pre></td></tr></table></figure><p>这两个都下好之后我们先进入到my-app里面后执行yarn start.开启一个react应用，他会用默认浏览器打开页面。</p><p>此时我们的应用目录结构如下:</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br></pre></td><td class="code"><pre><span class="line">├── README.md  </span><br><span class="line">├── node_modules  </span><br><span class="line">├── package.json</span><br><span class="line">├── .gitignore</span><br><span class="line">├── public</span><br><span class="line">│   ├── favicon.ico</span><br><span class="line">│   ├── index.html</span><br><span class="line">│   └── manifest.json</span><br><span class="line">└── src</span><br><span class="line">    ├── App.css</span><br><span class="line">    ├── App.js</span><br><span class="line">    ├── App.test.js</span><br><span class="line">    ├── index.css</span><br><span class="line">    ├── index.js</span><br><span class="line">    ├── logo.svg</span><br><span class="line">    └── serviceWorker.js</span><br></pre></td></tr></table></figure><p>没有配置或复杂的文件夹结构，只是构建应用程序所需的文件。</p><h4 id="进一步操作"><a href="#进一步操作" class="headerlink" title="进一步操作"></a>进一步操作</h4><p>在public目录下有我们应用的主页面index.html，上面有一些东西是自带有的，但是我们要弄成自己的应用，所以可以删除。</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br></pre></td><td class="code"><pre><span class="line">&lt;!DOCTYPE html&gt;</span><br><span class="line">&lt;html lang=&quot;en&quot;&gt;</span><br><span class="line"></span><br><span class="line">&lt;head&gt;</span><br><span class="line">  &lt;meta charset=&quot;utf-8&quot; /&gt;</span><br><span class="line">  &lt;link rel=&quot;shortcut icon&quot; href=&quot;%PUBLIC_URL%/favicon.ico&quot; /&gt;</span><br><span class="line">  &lt;meta name=&quot;viewport&quot; content=&quot;width=device-width, initial-scale=1, shrink-to-fit=no&quot; /&gt;</span><br><span class="line">  &lt;meta name=&quot;theme-color&quot; content=&quot;#000000&quot; /&gt;</span><br><span class="line">  &lt;title&gt;React App&lt;/title&gt;</span><br><span class="line">&lt;/head&gt;</span><br><span class="line"></span><br><span class="line">&lt;body&gt;</span><br><span class="line">  &lt;!-- 大概就这样，只留一个div作为应用的根节点。 --&gt;</span><br><span class="line">  &lt;div id=&quot;root&quot;&gt;&lt;/div&gt;</span><br><span class="line">&lt;/body&gt;</span><br><span class="line"></span><br><span class="line">&lt;/html&gt;</span><br></pre></td></tr></table></figure><p>再进入到我们的src文件夹将我们index.js,App.js,index.css里面的文件都干掉，后面我们一步一步用了再说。</p>]]></content>
    
    <summary type="html">
    
      &lt;p&gt;本系列文章学习掌握可对深入学习React有很大帮助，核心内容参照&lt;a href=&quot;https://zh-hans.reactjs.org/docs/hello-world.html&quot; target=&quot;_blank&quot; rel=&quot;noopener&quot;&gt;React官方文档&lt;/a&gt;的核心概念一步一步写的。&lt;br&gt;
    
    </summary>
    
      <category term="React" scheme="https://picsong.top/categories/React/"/>
    
    
      <category term="React" scheme="https://picsong.top/tags/React/"/>
    
      <category term="Redux" scheme="https://picsong.top/tags/Redux/"/>
    
      <category term="Hooks" scheme="https://picsong.top/tags/Hooks/"/>
    
  </entry>
  
</feed>
