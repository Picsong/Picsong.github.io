<?xml version="1.0" encoding="utf-8"?>
<feed xmlns="http://www.w3.org/2005/Atom">
  <title>彭松的博客</title>
  
  
  <link href="/atom.xml" rel="self"/>
  
  <link href="https://picsong.top/"/>
  <updated>2019-04-06T16:51:30.294Z</updated>
  <id>https://picsong.top/</id>
  
  <author>
    <name>彭松</name>
    
  </author>
  
  <generator uri="http://hexo.io/">Hexo</generator>
  
  <entry>
    <title>我是彭松</title>
    <link href="https://picsong.top/2019/04/05/%E6%88%91%E6%98%AF%E5%BD%AD%E6%9D%BE/"/>
    <id>https://picsong.top/2019/04/05/我是彭松/</id>
    <published>2019-04-05T15:10:30.000Z</published>
    <updated>2019-04-06T16:51:30.294Z</updated>
    
    <content type="html"><![CDATA[<p>你好，来了就是朋友，我将把这个blog越做越好</p>]]></content>
    
    <summary type="html">
    
      
      
        &lt;p&gt;你好，来了就是朋友，我将把这个blog越做越好&lt;/p&gt;

      
    
    </summary>
    
      <category term="哈哈" scheme="https://picsong.top/categories/%E5%93%88%E5%93%88/"/>
    
    
      <category term="Boy" scheme="https://picsong.top/tags/Boy/"/>
    
      <category term="IOT" scheme="https://picsong.top/tags/IOT/"/>
    
      <category term="PS" scheme="https://picsong.top/tags/PS/"/>
    
  </entry>
  
  <entry>
    <title>Hooks</title>
    <link href="https://picsong.top/2019/04/05/hooks/"/>
    <id>https://picsong.top/2019/04/05/hooks/</id>
    <published>2019-04-05T15:10:30.000Z</published>
    <updated>2019-04-07T03:31:07.072Z</updated>
    
    <content type="html"><![CDATA[<p><img src="http://with.muyunyun.cn/1daa3d783a4a7ed7f742882a08a3aa09.jpg-400" alt><br>这里就是摘要了，应该有张图在上面！<br><a id="more"></a></p><h3 id="Hooks-每次渲染带着一切"><a href="#Hooks-每次渲染带着一切" class="headerlink" title="Hooks 每次渲染带着一切"></a>Hooks 每次渲染带着一切</h3><ul><li>在 <code>hooks</code> 中每一次 <code>render</code> 都有自己的 <code>state</code> 和 <code>props</code>, 这和 <code>class</code> 中有点差异，见 <a href="https://overreacted.io/a-complete-guide-to-useeffect/#each-render-has-its-own-everything" target="_blank" rel="noopener">each-render-has-its-own-everything</a></li></ul><blockquote><p><code>class</code> 中可以用闭包模拟 <code>hooks</code> 的表现; <code>hooks</code> 中可以使用 <code>ref</code> 模拟 <code>class</code> 的表现, 或者在第二个参数传入需要鉴别的参数;</p></blockquote><h3 id="诚实地写出-useEffect-的所有依赖"><a href="#诚实地写出-useEffect-的所有依赖" class="headerlink" title="诚实地写出 useEffect 的所有依赖"></a>诚实地写出 useEffect 的所有依赖</h3><p>在以下 <code>demo</code> 中, <code>useEffect</code> 的第二个参数传入 <code>[]</code>, 希望 <code>useEffect</code> 里的函数只执行一次(类似在 <code>componentDidMount</code> 中执行一次), 页面上每隔 1s 递增 1。</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">Demo</span>(<span class="params"></span>) </span>&#123;</span><br><span class="line">  <span class="keyword">const</span> [count, setCount] = useState(<span class="number">0</span>);</span><br><span class="line"></span><br><span class="line">  useEffect(<span class="function"><span class="params">()</span> =&gt;</span> &#123;</span><br><span class="line">    <span class="keyword">const</span> id = setInterval(<span class="function"><span class="params">()</span> =&gt;</span> &#123;</span><br><span class="line">      setCount(count + <span class="number">1</span>);</span><br><span class="line">    &#125;, <span class="number">1000</span>);</span><br><span class="line">    <span class="keyword">return</span> <span class="function"><span class="params">()</span> =&gt;</span> &#123;</span><br><span class="line">      clearInterval(id);</span><br><span class="line">    &#125;;</span><br><span class="line">  &#125;, []);</span><br><span class="line"></span><br><span class="line">  <span class="keyword">return</span> count;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>但达到我们预期的效果了么? <a href="https://codesandbox.io/s/n3o2m1wpj4" target="_blank" rel="noopener">demo</a>, 可以看到界面上只增加到 1 就停止了。原因就是传入的第二个参数 <code>[]</code> 搞的鬼, <code>[]</code> 表示没有外界状态对 <code>effect</code> 产生干扰。流程大致如下:</p><ol><li>第一次调用 <code>useEffect</code> 传入的 <code>count</code> 为 0, 于是 <code>setCount(0 + 1)</code>;</li><li>受 <code>useEffect</code> 第二个参数 <code>[]</code> 的影响，所以相当于还是 <code>setCount(0 + 1)</code>;</li></ol><p>那如何修正上述问题呢? 方法有两个(方法一为主, 方法二为辅):</p><ul><li>方法一: 将 <code>[]</code> 改为 <code>[count]</code></li><li>方法二: 将 <code>setCount(count + 1)</code> 改为 <code>setCount(count =&gt; count + 1)</code>。这种方法的思想是修正状态的值而不依赖外面传进的状态。</li></ul><p>不过遇到 <code>setCount(count =&gt; count + 1)</code> 的情况就可以考虑使用 <code>useReducer</code> 了。</p><h3 id="useReducer"><a href="#useReducer" class="headerlink" title="useReducer"></a>useReducer</h3><p><code>useReducer</code> 将行为(dispatch) 和展现抽离开。</p><p>当更新的一个状态依赖于另一个状态时, 使用 <code>useReducer</code> 能避免调用多次 <code>useEffect</code>。见 <a href="https://overreacted.io/a-complete-guide-to-useeffect/#decoupling-updates-from-actions" target="_blank" rel="noopener">decoupling-updates-from-actions</a></p><h3 id="useEffect-中公用函数的逻辑"><a href="#useEffect-中公用函数的逻辑" class="headerlink" title="useEffect 中公用函数的逻辑"></a>useEffect 中公用函数的逻辑</h3><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">Demo</span>(<span class="params"></span>) </span>&#123;</span><br><span class="line">  <span class="keyword">const</span> [count, setCount] = useState(<span class="number">0</span>);</span><br><span class="line"></span><br><span class="line">  <span class="function"><span class="keyword">function</span> <span class="title">getFetchUrl</span>(<span class="params">query</span>) </span>&#123;</span><br><span class="line">    <span class="keyword">return</span> <span class="string">`http://demo<span class="subst">$&#123;query&#125;</span>`</span></span><br><span class="line">  &#125;</span><br><span class="line"></span><br><span class="line">  useEffect(<span class="function"><span class="params">()</span> =&gt;</span> &#123;</span><br><span class="line">    <span class="keyword">const</span> url = getFetchUrl(<span class="string">'react'</span>)</span><br><span class="line">  &#125;, [getFetchUrl]);</span><br><span class="line"></span><br><span class="line">  useEffect(<span class="function"><span class="params">()</span> =&gt;</span> &#123;</span><br><span class="line">    <span class="keyword">const</span> url = getFetchUrl(<span class="string">'redux'</span>)</span><br><span class="line">  &#125;, [getFetchUrl]);</span><br><span class="line"></span><br><span class="line">  <span class="keyword">return</span> count;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>此时 <code>useEffect</code> 中传入的第二个参数 <code>getFetchUrl</code> 相当于每次都是新的, 所以每次都会请求数据, 那除了 <code>[getFetchUrl]</code> 将改为 <code>[]</code> 这种不推荐的写法外，有两种解决方法:</p><ol><li>提升 <code>getFetchUrl</code> 的作用域</li><li>使用 <code>useCallback</code>(<code>useCallback</code> 的作用类似 <code>useMemo</code>)</li></ol><blockquote><p><code>React.memo</code> 修饰一个函数组件, <code>useMemo</code> 修饰一个函数。它们本质都是运用缓存。</p></blockquote><h3 id="todo"><a href="#todo" class="headerlink" title="todo"></a>todo</h3><ul><li style="list-style: none"><input type="checkbox"> 完善 Each Render Has Its Own Everything 例子</li><li style="list-style: none"><input type="checkbox"> <a href="https://www.robinwieruch.de/react-hooks-fetch-data/" target="_blank" rel="noopener">How to fetch data with React Hooks?</a>: 计划读, 可能涉及 susepense</li></ul><h3 id="相关资源"><a href="#相关资源" class="headerlink" title="相关资源"></a>相关资源</h3><ul><li><a href="https://github.com/rehooks/awesome-react-hooks" target="_blank" rel="noopener">awesome-react-hooks</a></li><li><a href="https://github.com/gragland/usehooks" target="_blank" rel="noopener">usehooks</a></li><li><a href="https://overreacted.io/a-complete-guide-to-useeffect/" target="_blank" rel="noopener">a-complete-guide-to-useeffect</a>: 一定要读 Dan 的这篇文章</li></ul>]]></content>
    
    <summary type="html">
    
      &lt;p&gt;&lt;img src=&quot;http://with.muyunyun.cn/1daa3d783a4a7ed7f742882a08a3aa09.jpg-400&quot; alt&gt;&lt;br&gt;这里就是摘要了，应该有张图在上面！&lt;br&gt;
    
    </summary>
    
      <category term="React" scheme="https://picsong.top/categories/React/"/>
    
    
      <category term="React" scheme="https://picsong.top/tags/React/"/>
    
      <category term="Hooks" scheme="https://picsong.top/tags/Hooks/"/>
    
  </entry>
  
  <entry>
    <title>Hello World</title>
    <link href="https://picsong.top/2019/04/05/hello-world/"/>
    <id>https://picsong.top/2019/04/05/hello-world/</id>
    <published>2019-04-05T14:35:01.108Z</published>
    <updated>2019-04-06T10:20:33.352Z</updated>
    
    <content type="html"><![CDATA[<p>Welcome to <a href="https://hexo.io/" target="_blank" rel="noopener">Hexo</a>! This is your very first post. Check <a href="https://hexo.io/docs/" target="_blank" rel="noopener">documentation</a> for more info. If you get any problems when using Hexo, you can find the answer in <a href="https://hexo.io/docs/troubleshooting.html" target="_blank" rel="noopener">troubleshooting</a> or you can ask me on <a href="https://github.com/hexojs/hexo/issues" target="_blank" rel="noopener">GitHub</a>.</p><h2 id="Quick-Start"><a href="#Quick-Start" class="headerlink" title="Quick Start"></a>Quick Start</h2><h3 id="Create-a-new-post"><a href="#Create-a-new-post" class="headerlink" title="Create a new post"></a>Create a new post</h3><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">$ hexo new <span class="string">"My New Post"</span></span><br></pre></td></tr></table></figure><p>More info: <a href="https://hexo.io/docs/writing.html" target="_blank" rel="noopener">Writing</a></p><h3 id="Run-server"><a href="#Run-server" class="headerlink" title="Run server"></a>Run server</h3><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">$ hexo server</span><br></pre></td></tr></table></figure><p>More info: <a href="https://hexo.io/docs/server.html" target="_blank" rel="noopener">Server</a></p><h3 id="Generate-static-files"><a href="#Generate-static-files" class="headerlink" title="Generate static files"></a>Generate static files</h3><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">$ hexo generate</span><br></pre></td></tr></table></figure><p>More info: <a href="https://hexo.io/docs/generating.html" target="_blank" rel="noopener">Generating</a></p><h3 id="Deploy-to-remote-sites"><a href="#Deploy-to-remote-sites" class="headerlink" title="Deploy to remote sites"></a>Deploy to remote sites</h3><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">$ hexo deploy</span><br></pre></td></tr></table></figure><p>More info: <a href="https://hexo.io/docs/deployment.html" target="_blank" rel="noopener">Deployment</a></p>]]></content>
    
    <summary type="html">
    
      
      
        &lt;p&gt;Welcome to &lt;a href=&quot;https://hexo.io/&quot; target=&quot;_blank&quot; rel=&quot;noopener&quot;&gt;Hexo&lt;/a&gt;! This is your very first post. Check &lt;a href=&quot;https://hexo.
      
    
    </summary>
    
      <category term="呵呵" scheme="https://picsong.top/categories/%E5%91%B5%E5%91%B5/"/>
    
    
      <category term="Hello" scheme="https://picsong.top/tags/Hello/"/>
    
      <category term="World" scheme="https://picsong.top/tags/World/"/>
    
  </entry>
  
</feed>
